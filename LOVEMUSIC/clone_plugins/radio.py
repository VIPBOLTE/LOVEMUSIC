from pyrogram import filters
from pyrogram.enums import ChatMemberStatus
from pyrogram.errors import UserNotParticipant
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message

from config import BANNED_USERS
from strings import get_string
from LOVEMUSIC import app
from LOVEMUSIC.utils.database import get_assistant, get_lang
from LOVEMUSIC.utils.decorators.radio import RadioWrapper
from LOVEMUSIC.utils.logger import play_logs
from LOVEMUSIC.utils.stream.stream import stream

# Radio Station List
RADIO_STATION = {
    "·¥Ä…™ Ä  ô…™ ü·¥Äs·¥ò·¥ú Ä": "http://air.pc.cdn.bitgravity.com/air/live/pbaudio110/playlist.m3u8",
    "·¥Ä…™ Ä  Ä·¥Ä…™·¥ò·¥ú Ä": "http://air.pc.cdn.bitgravity.com/air/live/pbaudio118/playlist.m3u8",
    "·¥Ñ·¥Ä·¥ò…™·¥õ·¥Ä ü Íú∞·¥ç": "http://media-ice.musicradio.com/CapitalMP3?.mp3&listening-from-radio-garden=1616312105154",
    "·¥á…¥…¢ ü…™s ú": "https://hls-01-regions.emgsound.ru/11_msk/playlist.m3u8",
    "·¥Ö·¥Ö s·¥ò·¥è Ä·¥õs": "http://103.199.161.254/Content/ddsports/Live/Channel(DDSPORTS)/index.m3u8",
    " Ä·¥Ä·¥Ö…™·¥è ·¥õ·¥è·¥Ö·¥Ä è": "http://stream.zenolive.com/8wv4d8g4344tv",
    "s·¥Ä…¥s·¥ã·¥Ä Ä ·¥õ·¥†": "https://d26idhjf0y1p2g.cloudfront.net/out/v1/cd66dd25b9774cb29943bab54bbf3e2f/index.m3u8",
    "s·¥Ä·¥Ö ú…¥·¥Ä ·¥õ·¥†": "https://6n3yow8pl9ok-hls-live.5centscdn.com/sadhanalivetv/live.stream/playlist.m3u8",
    "·¥ò·¥õ·¥Ñ ·¥ç·¥ús…™·¥Ñ": "https://streaming.ptcplay.com/ptcMusicINOne/smil:Live.smil/playlist.m3u8",
    "ùüøx·¥ç ·¥ç·¥ús…™·¥Ñ": "https://d2q8p4pe5spbak.cloudfront.net/bpk-tv/9XM/9XM.isml/index.m3u8",
    "…¥ Ä·¥ä  ú…™·¥õs": "http://cdn.nrjaudio.fm/audio1/fr/30001/mp3_128.mp3",
}


# Function to create triangular buttons dynamically
def create_triangular_buttons():
    buttons = []
    stations = list(RADIO_STATION.keys())
    row_count = 2  # Number of buttons per row

    # Iterate through the stations and create buttons
    while stations:
        button_row = []
        for _ in range(min(row_count, len(stations))):
            station_name = stations.pop(0)
            button_row.append(
                InlineKeyboardButton(
                    station_name, callback_data=f"radio_station_{station_name}"
                )
            )
        buttons.append(button_row)

    return buttons


@app.on_message(
    filters.command(["radio", "radioplayforce", "cradio"])
    & filters.group
    & ~BANNED_USERS
)
@RadioWrapper
async def radio(
    client, message: Message, _, chat_id, video, channel, playmode, url, fplay
):
    msg = await message.reply_text("·¥ò ü·¥á·¥Äs·¥á ·¥°·¥Ä…™·¥õ ·¥Ä ·¥ç·¥è·¥ç·¥á…¥·¥õ...")

    try:
        userbot = await get_assistant(message.chat.id)
        get = await app.get_chat_member(message.chat.id, userbot.id)

        if get.status == ChatMemberStatus.BANNED:
            return await msg.edit_text(
                text=f"¬ª {userbot.mention} ·¥Äss…™s·¥õ·¥Ä…¥·¥õ …™s  ô·¥Ä…¥…¥·¥á·¥Ö …™…¥ {message.chat.title}.\n·¥ò ü·¥á·¥Äs·¥á ·¥ú…¥ ô·¥Ä…¥ ·¥Ä…¥·¥Ö ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥."
            )
    except UserNotParticipant:
        pass

    # Create triangular buttons for available radio stations
    buttons = create_triangular_buttons()

    # Create a textual list of all channels
    channels_list = "\n".join(
        [f"{i + 1}. {name}" for i, name in enumerate(RADIO_STATION.keys())]
    )

    # Send message with buttons and list of channels
    await message.reply_text(
        f"·¥ò ü·¥á·¥Äs·¥á ·¥Ñ ü…™·¥Ñ·¥ã  ô·¥á ü·¥è·¥°  ô·¥ú·¥õ·¥õ·¥è…¥ ·¥õ·¥è ·¥ò ü·¥Ä è ·¥Ä  Ä·¥Ä·¥Ö…™·¥è ·¥Ñ ú·¥Ä…¥…¥·¥á ü:\n\n"
        f"·¥Ñ ú·¥Ä…¥…¥·¥á ü  ü…™s·¥õ:\n{channels_list}\n\n"
        f"s·¥á ü·¥á·¥Ñ·¥õ ·¥Ä  ô·¥ú·¥õ·¥õ·¥è…¥ ·¥õ·¥è ·¥ò ü·¥Ä è ·¥õ ú·¥á  Ä·¥ás·¥ò·¥á·¥Ñ·¥õ…™·¥†·¥á  Ä·¥Ä·¥Ö…™·¥è s·¥õ·¥Ä·¥õ…™·¥è…¥.",
        reply_markup=InlineKeyboardMarkup(buttons),
    )


@app.on_callback_query(filters.regex(r"radio_station_(.*)"))
async def play_radio(client, callback_query):
    station_name = callback_query.data.split("_")[-1]
    RADIO_URL = RADIO_STATION.get(station_name)

    if RADIO_URL:
        await callback_query.message.edit_text(
            "·¥è·¥ã  ô·¥Ä ô è ·¥ò ü·¥á·¥Äs·¥á ·¥°·¥Ä…™·¥õ s·¥õ·¥Ä Ä·¥õ…™…¥…¢  è·¥è·¥ú Ä  Ä·¥Ä·¥Ö…™·¥è …™…¥ ·¥†·¥Ñ ·¥ò ü·¥á·¥Äs·¥á ·¥ä·¥è…™…¥ ·¥†·¥Ñ ·¥Ä…¥·¥Ö ·¥á…¥·¥ä·¥è èüòÅ"
        )
        language = await get_lang(callback_query.message.chat.id)
        _ = get_string(language)
        chat_id = callback_query.message.chat.id

        try:
            await stream(
                _,
                callback_query.message,
                callback_query.from_user.id,
                RADIO_URL,
                chat_id,
                callback_query.from_user.mention,
                callback_query.message.chat.id,
                video=None,
                streamtype="index",
            )
        except Exception as e:
            ex_type = type(e).__name__
            err = e if ex_type == "AssistantErr" else _["general_3"].format(ex_type)
            await callback_query.message.edit_text(err)
        await play_logs(callback_query.message, streamtype="Radio")
    else:
        await callback_query.message.edit_text("…™n·¥†·¥Ä ü…™·¥Ö s·¥õ·¥Ä·¥õ…™·¥è…¥ s·¥á ü·¥á·¥Ñ·¥õ·¥á·¥Ö!")


__MODULE__ = "Radio"
__HELP__ = """
/radio - ·¥õ·¥è ·¥ò ü·¥Ä è  Ä·¥Ä·¥Ö…™·¥è …™…¥ ·¥õ ú·¥á ·¥†·¥è…™·¥Ñ·¥á ·¥Ñ ú·¥Ä·¥õ.
"""
