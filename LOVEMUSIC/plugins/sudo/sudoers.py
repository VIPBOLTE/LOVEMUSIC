from pyrogram import filters
from pyrogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from LOVEMUSIC import app
from pyrogram.types import InputMediaVideo
from LOVEMUSIC.misc import SUDOERS, SPECIAL_ID
from LOVEMUSIC.utils.database import add_sudo, remove_sudo
from LOVEMUSIC.utils.decorators.language import language
from LOVEMUSIC.utils import extract_user
from LOVEMUSIC.utils.inline import close_markup
from config import BANNED_USERS, OWNER_ID
import logging

@app.on_message(filters.command(["addsudo"], prefixes=["/", "!", "%", ",", "", ".", "@", "#"]) & (filters.user(OWNER_ID) | filters.user(SPECIAL_ID)))
@language
async def useradd(client, message: Message, _):
    if not message.reply_to_message:
        if len(message.command) != 2:
            return await message.reply_text(_["general_1"])
    user = await extract_user(message)
    if user.id in SUDOERS:
        return await message.reply_text(_["sudo_1"].format(user.mention))
    added = await add_sudo(user.id)
    if added:
        SUDOERS.add(user.id)
        await message.reply_text(_["sudo_2"].format(user.mention))
    else:
        await message.reply_text(_["sudo_8"])

@app.on_message(filters.command(["delsudo", "rmsudo"], prefixes=["/", "!", "%", ",", "", ".", "@", "#"]) & (filters.user(OWNER_ID) | filters.user(SPECIAL_ID)))
@language
async def userdel(client, message: Message, _):
    if not message.reply_to_message:
        if len(message.command) != 2:
            return await message.reply_text(_["general_1"])
    user = await extract_user(message)
    if user.id not in SUDOERS:
        return await message.reply_text(_["sudo_3"].format(user.mention))
    if user.id == SPECIAL_ID:
        return await message.reply_text(" è·¥è·¥ú ·¥Ñ·¥Ä…¥…¥·¥è·¥õ  Ä·¥á·¥ç·¥è·¥†·¥á ·¥õ ú…™s s·¥ò·¥á·¥Ñ…™·¥Ä ü ·¥ús·¥á Ä.")
    removed = await remove_sudo(user.id)
    if removed:
        SUDOERS.remove(user.id)
        await message.reply_text(_["sudo_4"].format(user.mention))
    else:
        await message.reply_text(_["sudo_8"])

@app.on_message(filters.command(["sudolist", "listsudo", "sudoers"], prefixes=["/", "!", "%", ",", "", ".", "@", "#"]) & ~BANNED_USERS)
async def sudoers_list(client, message: Message):
    keyboard = [[InlineKeyboardButton("‡πè ·¥†…™·¥á·¥° s·¥ú·¥Ö·¥è ü…™s·¥õ ‡πè", callback_data="check_sudo_list")]]
    reply_markups = InlineKeyboardMarkup(keyboard)
    await message.reply_video(video="https://telegra.ph/file/3c9b53024f150d99032e1.mp4", caption="**¬ª ·¥Ñ ú·¥á·¥Ñ·¥ã s·¥ú·¥Ö·¥è  ü…™s·¥õ  ô è …¢…™·¥†·¥á…¥  ô·¥á ü·¥è·¥°  ô·¥ú·¥õ·¥õ·¥è…¥.**\n\n**¬ª …¥·¥è·¥õ·¥á:**  ·¥è…¥ ü è s·¥ú·¥Ö·¥è ·¥ús·¥á Äs ·¥Ñ·¥Ä…¥ ·¥†…™·¥á·¥°. ", reply_markup=reply_markups)
    

@app.on_callback_query(filters.regex("^check_sudo_list$"))
async def check_sudo_list(client, callback_query: CallbackQuery):
    keyboard = []
    if callback_query.from_user.id not in SUDOERS:
        return await callback_query.answer("s·¥è Ä Ä è  è·¥Ä·¥Ä Ä s…™ Ä“ì ·¥è·¥°…¥·¥á Ä ·¥è Ä s·¥ú·¥Ö·¥è ·¥°·¥Ä ü·¥á  ú…™ s·¥ú·¥Ö·¥è ü…™s·¥õ ·¥Ö·¥á·¥ã ú s·¥Ä·¥ã·¥õ·¥á  ú·¥Ä…™", show_alert=True)
    else:
        user = await app.get_users(OWNER_ID)

        # Ensure user is a single object and handle it accordingly
        if isinstance(user, list):
            user_mention = ", ".join([u.mention for u in user if hasattr(u, 'mention')]) or "Unknown User"
        else:
            user_mention = user.mention if hasattr(user, 'mention') else user.first_name

        caption = f"**Àπ ü…™s·¥õ ·¥è“ì  ô·¥è·¥õ ·¥ç·¥è·¥Ö·¥á Ä·¥Ä·¥õ·¥è ÄsÀº**\n\n**üåπO·¥°…¥·¥á Ä** ‚û• {user_mention}\n\n"

        keyboard.append([InlineKeyboardButton("‡πè ·¥†…™·¥á·¥° ·¥è·¥°…¥·¥á Ä ‡πè", url=f"tg://openmessage?user_id={OWNER_ID}")])
        
        count = 1
        for user_id in SUDOERS:
            if user_id != OWNER_ID and user_id != SPECIAL_ID:
                try:
                    user = await app.get_users(user_id)
                    if isinstance(user, list):
                        user_mention = ", ".join([u.mention for u in user if hasattr(u, 'mention')]) or "Unknown User"
                    else:
                        user_mention = user.mention if hasattr(user, 'mention') else user.first_name
                    caption += f"üéÅ S·¥ú·¥Ö·¥è {count} ¬ª {user_mention} `{user_id}`\n"
                    count += 1
                except Exception as e:
                    continue

        # Add a "Back" button at the end
        keyboard.append([InlineKeyboardButton("‡πè  ô·¥Ä·¥Ñ·¥ã ‡πè", callback_data="back_to_main_menu")])

        await callback_query.edit_message_text(caption, reply_markup=InlineKeyboardMarkup(keyboard))

@app.on_callback_query(filters.regex("^back_to_main_menu$"))
async def back_to_main_menu(client, callback_query: CallbackQuery):
    keyboard = [[InlineKeyboardButton("‡πè ·¥†…™·¥á·¥° s·¥ú·¥Ö·¥è ü…™s·¥õ ‡πè", callback_data="check_sudo_list")]]
    reply_markupes = InlineKeyboardMarkup(keyboard)
    await callback_query.message.edit_caption(caption="**¬ª ·¥Ñ ú·¥á·¥Ñ·¥ã s·¥ú·¥Ö·¥è  ü…™s·¥õ  ô è …¢…™·¥†·¥á…¥  ô·¥á ü·¥è·¥°  ô·¥ú·¥õ·¥õ·¥è…¥.**\n\n**¬ª …¥·¥è·¥õ·¥á:**  ·¥è…¥ ü è s·¥ú·¥Ö·¥è ·¥ús·¥á Äs ·¥Ñ·¥Ä…¥ ·¥†…™·¥á·¥°. ", reply_markup=reply_markupes)

@app.on_message(filters.command(["delallsudo"], prefixes=["/", "!", "%", ",", "", ".", "@", "#"]) & filters.user(OWNER_ID))
@language
async def del_all_sudo(client, message: Message, _):
    removed_users = []  # List to store removed users' information
    for user_id in SUDOERS.copy():
        if user_id != OWNER_ID and user_id != SPECIAL_ID:
            removed = await remove_sudo(user_id)
            if removed:
                SUDOERS.remove(user_id)
                try:
                    user = await app.get_users(user_id)
                    user_mention = user.mention if user else f"·¥ús·¥á Ä …™·¥Ö: `{user_id}`"
                    removed_users.append(f"{user_mention} `{user_id}`")
                except Exception as e:
                    logging.error(f"·¥á Ä Ä·¥è Ä “ì·¥á·¥õ·¥Ñ ú…™…¥…¢ ·¥ús·¥á Ä {user_id}: {e}")
                    removed_users.append(f"·¥ús·¥á Ä …™·¥Ö: `{user_id}`")

    if removed_users:
        removed_users_text = "\n".join(removed_users)
        await message.reply_text(f" Ä·¥á·¥ç·¥è·¥†·¥á·¥Ö ·¥õ ú·¥á “ì·¥è ü ü·¥è·¥°…™…¥…¢ ·¥ús·¥á Äs “ì Ä·¥è·¥ç ·¥õ ú·¥á s·¥ú·¥Ö·¥è  ü…™s·¥õ:\n\n{removed_users_text}")
    else:
        await message.reply_text("…¥·¥è ·¥ús·¥á Äs ·¥°·¥á Ä·¥á  Ä·¥á·¥ç·¥è·¥†·¥á·¥Ö “ì Ä·¥è·¥ç ·¥õ ú·¥á s·¥ú·¥Ö·¥è  ü…™s·¥õ.")
